import kotlin.Boolean;

-- This file defines the book, bookFile, bookChapter, mediaProgress tables and related queries.

CREATE TABLE book (
  id TEXT NOT NULL PRIMARY KEY,
  title TEXT NOT NULL,
  author TEXT,
  duration INTEGER NOT NULL,
  libraryId TEXT,
  FOREIGN KEY(libraryId) REFERENCES library(id) ON DELETE CASCADE
);

CREATE TABLE bookFile (
  id TEXT NOT NULL PRIMARY KEY,
  name TEXT NOT NULL,
  duration REAL NOT NULL,
  mimeType TEXT NOT NULL,
  bookId TEXT NOT NULL,
  FOREIGN KEY(bookId) REFERENCES book(id) ON DELETE CASCADE
);

CREATE INDEX book_files_bookId_idx ON bookFile(bookId);

CREATE TABLE bookChapter (
  id TEXT NOT NULL PRIMARY KEY,
  duration REAL NOT NULL,
  start REAL NOT NULL,
  end REAL NOT NULL,
  title TEXT NOT NULL,
  bookId TEXT NOT NULL,
  FOREIGN KEY(bookId) REFERENCES book(id) ON DELETE CASCADE
);

CREATE INDEX book_chapters_bookId_idx ON bookChapter(bookId);

CREATE TABLE mediaProgress (
  bookId TEXT NOT NULL PRIMARY KEY,
  currentTime REAL NOT NULL,
  isFinished INTEGER AS Boolean NOT NULL,
  lastUpdate INTEGER NOT NULL,
  FOREIGN KEY(bookId) REFERENCES book(id) ON DELETE CASCADE
);

CREATE INDEX media_progress_bookId_idx ON mediaProgress(bookId);

upsertBook:
INSERT OR REPLACE INTO book (id, title, author, duration, libraryId)
VALUES (?, ?, ?, ?, ?);

upsertBookFiles:
INSERT OR REPLACE INTO bookFile (id, name, duration, mimeType, bookId)
VALUES (?, ?, ?, ?, ?);

upsertBookChapters:
INSERT OR REPLACE INTO bookChapter (id, duration, start, end, title, bookId)
VALUES (?, ?, ?, ?, ?, ?);

upsertMediaProgress:
INSERT OR REPLACE INTO mediaProgress (bookId, currentTime, isFinished, lastUpdate)
VALUES (?, ?, ?, ?);


fetchCachedBooks:
SELECT * FROM book
WHERE (libraryId IS NULL OR libraryId = ?)
ORDER BY title
LIMIT ? OFFSET (? * ?);

searchCachedBooks:
SELECT * FROM book
WHERE (libraryId IS NULL OR libraryId = ?)
  AND (title LIKE '%' || ? || '%' OR author LIKE '%' || ? || '%')
ORDER BY title;

fetchRecentlyListenedCachedBooks:
SELECT book.*
FROM book
INNER JOIN mediaProgress ON book.id = mediaProgress.bookId
WHERE (libraryId IS NULL OR libraryId = ?)
ORDER BY mediaProgress.lastUpdate DESC
LIMIT 10;

fetchCachedBook:
SELECT book.*
FROM book
WHERE id = ?;

fetchBook:
SELECT book.*
FROM book
WHERE id = ?;

fetchBookIds:
SELECT id
FROM book
WHERE (libraryId IS NULL OR libraryId = ?);

fetchMediaProgress:
SELECT * FROM mediaProgress
WHERE bookId = ?;


updateMediaProgress:
UPDATE mediaProgress
SET currentTime = ?, isFinished = ?, lastUpdate = ?
WHERE bookId = ?;

deleteBook:
DELETE FROM book
WHERE id = ?;
