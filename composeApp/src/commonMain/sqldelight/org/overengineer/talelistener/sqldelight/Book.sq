import kotlin.Boolean;

-- This file defines the book, bookFile, bookChapter, mediaProgress tables and related queries.

CREATE TABLE bookEntity (
  id TEXT NOT NULL PRIMARY KEY,
  title TEXT NOT NULL,
  author TEXT,
  duration INTEGER NOT NULL,
  libraryId TEXT,
  FOREIGN KEY(libraryId) REFERENCES libraryEntity(id) ON DELETE CASCADE
);

CREATE TABLE bookFileEntity (
  id TEXT NOT NULL PRIMARY KEY,
  name TEXT NOT NULL,
  duration REAL NOT NULL,
  mimeType TEXT NOT NULL,
  bookId TEXT NOT NULL,
  FOREIGN KEY(bookId) REFERENCES bookEntity(id) ON DELETE CASCADE
);

CREATE INDEX book_files_bookId_idx ON bookFileEntity(bookId);

CREATE TABLE bookChapterEntity (
  id TEXT NOT NULL PRIMARY KEY,
  duration REAL NOT NULL,
  start REAL NOT NULL,
  end REAL NOT NULL,
  title TEXT NOT NULL,
  bookId TEXT NOT NULL,
  FOREIGN KEY(bookId) REFERENCES bookEntity(id) ON DELETE CASCADE
);

CREATE INDEX book_chapters_bookId_idx ON bookChapterEntity(bookId);

CREATE TABLE mediaProgressEntity (
  bookId TEXT NOT NULL PRIMARY KEY,
  currentTime REAL NOT NULL,
  isFinished INTEGER AS Boolean NOT NULL,
  lastUpdate INTEGER NOT NULL,
  FOREIGN KEY(bookId) REFERENCES bookEntity(id) ON DELETE CASCADE
);

CREATE INDEX media_progress_bookId_idx ON mediaProgressEntity(bookId);

upsertBook:
INSERT OR REPLACE INTO bookEntity (id, title, author, duration, libraryId)
VALUES ?;

upsertBookFile:
INSERT OR REPLACE INTO bookFileEntity (id, name, duration, mimeType, bookId)
VALUES ?;

upsertBookChapter:
INSERT OR REPLACE INTO bookChapterEntity (id, duration, start, end, title, bookId)
VALUES ?;

upsertMediaProgress:
INSERT OR REPLACE INTO mediaProgressEntity (bookId, currentTime, isFinished, lastUpdate)
VALUES ?;


fetchCachedBooks:
SELECT * FROM bookEntity
WHERE (libraryId IS NULL OR libraryId = ?)
ORDER BY title
LIMIT ? OFFSET (? * ?);

searchCachedBooks:
SELECT * FROM bookEntity
WHERE (libraryId IS NULL OR libraryId = ?)
  AND (title LIKE '%' || ? || '%' OR author LIKE '%' || ? || '%')
ORDER BY title;

fetchRecentlyListenedCachedBooks:
SELECT bookEntity.*
FROM bookEntity
INNER JOIN mediaProgressEntity ON bookEntity.id = mediaProgressEntity.bookId
WHERE (libraryId IS NULL OR libraryId = ?)
ORDER BY mediaProgressEntity.lastUpdate DESC
LIMIT 10;

fetchBook:
SELECT bookEntity.*
FROM bookEntity
WHERE id = ?;

fetchBookIds:
SELECT id
FROM bookEntity
WHERE (libraryId IS NULL OR libraryId = ?);

fetchMediaProgress:
SELECT * FROM mediaProgressEntity
WHERE bookId = ?;

fetchBookFilesForBookId:
SELECT bookFileEntity.*
FROM bookFileEntity
WHERE bookId = ?;

fetchBookChaptersForBookId:
SELECT bookChapterEntity.*
FROM bookChapterEntity
WHERE bookId = ?;


updateMediaProgress:
UPDATE mediaProgressEntity
SET currentTime = ?, isFinished = ?, lastUpdate = ?
WHERE bookId = ?;

deleteBook:
DELETE FROM bookEntity
WHERE id = ?;
